openapi: 3.0.0
info:
  description: ESIR2 Projet Simba - Smart Doodle
  version: 1.0.0
  title: Swagger Projet Simba

tags:
  - name: Users
  - name: Polls
  - name: Pad
  - name: Choices
  - name: Votes
  - name: Comments
  - name: Export
  - name: MealPreferences

paths:   
  /api/users:
    get:
      tags:
        - Users
      summary: Get all the users
      description: Get the users list but without password property
      operationId: retrieveAllUsers
      responses:
        '200':
          description: OK


    post:
      tags:
         - Users
      summary: Create a new user
      operationId: createUser
      parameters:
        - in: query
          name: user
          schema: 
            $ref: '#/components/schemas/User'
          required: true
          description: properties of the new user to create
      responses:
        '201':
          description:  Created
          
  
  /api/users/{userId}:
    get:
      tags: 
        - Users
      summary: Get a user
      description: Get a specific user but without password property
      operationId: retrieveUser
      responses: 
        '200':
          description: OK
        '404':
          description: Not Found
    parameters:
      - in: path
        name: userId
        schema:
          type: number
          format: int64
        required: true
        description: ID of the user to get
          
    put:
      tags: 
        - Users
      summary: Update a user
      operationId: updateUser
      description: Update a user properties (username, password)
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user to update
          schema:
            type: number
            format: int64
        - in: query
          name: user
          schema:
            $ref: '#/components/schemas/User'
          required: true
          description: the new user properties
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      
    delete:
      tags:
        - Users
      summary: Delete a specific user by id
      operationId: deleteUser
      description: delete the user from the database, but also from all polls and choices associated to this user
      parameters:
        - in: path
          name: userId
          schema:
            type: number
            format: int64
          required: true
          description: ID of the user to delete
      responses:
        '200':
          description: OK
        '404':
          description: Not Found

  /api/polls/{slug}/users:
    get:
      tags:
        - Users
      summary: Get all user associated to a specific poll
      operationId: getAllUserFromPoll
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
        '404':
          description: Not Found


  /api/polls:
    get:
      tags:
        - Polls
      summary: Get all polls
      operationId: retrieveAllpolls
      responses:
        '200':
          description: OK

    post:
      tags:
        - Polls
      summary: Create a new poll
      operationId: createPoll
      parameters:
        - in: query
          name: poll
          schema: 
            $ref: '#/components/schemas/Poll'
          required: true
          description: the properties of the poll to create
      responses:
        '201': 
          description: Created

  
  /api/polls/{slug}:
    get: 
      tags:
        - Polls
      summary: Get a specific poll by id
      operationId: retrievePoll
      parameters:
        - in: path
          name: slug
          schema: 
            type: string
          required: true
        - in: query
          name: token
          schema: 
            type: string
          required: false
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    

    put:
      tags: 
        - Polls
      summary: Update a specific poll
      operationId: updatePoll
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
        - in: query
          name: poll
          schema:
            $ref: '#/components/schemas/Poll'
          required: true
          description: the new properties of the poll to update
        - in: query
          name: token
          schema:   
            type: string
          required: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found          


    delete: 
      tags:
        - Polls
      summary: Delete a specific poll
      operationId: deletePoll
      parameters: 
        - in: path
          name: slug
          schema:
            type: string
          required: true
        - in: query 
          name: token
          schema: 
            type: string
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found

  /api/polls/{slug}/pad:
    get:
      tags: 
        - Pad
      operationId: retrievePadURL
      parameters:
        - in: path
          name: slug
          schema: 
            type: string
          required: true 
      responses:
        '200':
          description: OK
        '404':
          description: Not Found

  /api/polls/{slug}/choices:
    get:
      tags:
        - Choices
      summary: Get all choices associated to a specific poll
      operationId: retrieveAllChoicesFromPoll
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
        '404':
          description: Not Found

    post:
      tags: 
        - Choices
      summary: Create new choices for a specific poll
      operationId: createChoices
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
        - in: query
          name: token
          schema:
            type: string
          required: true
        - in: query
          name: choices
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Choice'
          required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized


    delete:
      tags:
        - Choices
      operationId: deleteChoiceFromPoll
      summary: Delete a specific choice associated to a specific poll
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
        - in: query 
          name: token
          schema:   
            type: string
          required: true
        - in: query
          name: choices
          schema: 
            type: object
            format: HashMap<String, List<Long>>
          description: String = "choices" et Long = idChoice
          required: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found

  
  /api/users/{userId}/choices:
    get:
      tags:
        - Choices
      operationId: retrieveAllChoicesFromUser
      summary: Get all choices associated to a specific user
      parameters:
        - in: path
          name: userId
          schema:
            type: number
            format: int64
          required: true
      responses:
        '200':
          description: OK
        '404':
          description: Not Found

  /api/users/{userId}/choices/{choiceId}:
    get:
      tags:
       - Choices
      operationId: retrieveChoiceFromUser
      summary: Get a specific choice associated to a specific user
      parameters:
        - in: path
          name: userId
          schema: 
            type: number
            format: int64
          required: true
        - in: path
          name: choiceId
          schema:
            type: number
            format: int64
          required: true
      responses:
        '200':
          description: OK
        '404':
          description: Not Found


  
      

  /api/polls/{slug}/choices/{choiceId}:
    get:
      tags:
        - Choices
      operationId: retrieveChoiceFromPoll
      summary: Get a specific choice associated to a specific poll
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
        - in: path
          name: choiceId
          schema:
            type: number
            format: int64
          required: true
      responses:
        '200':
          description: OK
        '404':
          description: Not Found

    put:
      tags:
        - Choices
      operationId: updateChoice
      summary: Update a choice associated to a specific poll
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
        - in: path
          name: choiceId
          schema:
            type: number
            format: int64
          required: true
        - in: query
          name: choice
          schema:
            $ref: '#/components/schemas/Choice'
          required: true
          description: the new properties of the choice to update
        - in: query
          name: token
          schema: 
            type: string
          required: true
      responses:
        '200':
          description: OK
        '401':
          description: 'Unauthorized'
        '404':
          description: Not Found

  /api/polls/{slug}/choices/{choiceId}/count:
    get:
      tags:
        - Votes
      operationId: numberOfVoteForChoice
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
        - in: path
          name: choiceId
          schema:
            type: number
            format: int64
          required: true
      responses:
        '200':
          description: OK
        '404':
          description: Not Found

  /api/polls/{slug}/vote/{userId}:
    post:
      tags:
        - Votes
      operationId: vote
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
        - in: path
          name: userId
          schema: 
            type: number
            format: int64
          required: true
        - in: query
          name: choices
          schema:
            type: object
            format: HashMap<String, List<Long>>
          description: String = "choices" et Long = idChoice
          required: true 
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
      



  /api/polls/{slug}/choices/{choiceId}/removevote/{userId}:
    post:
      tags: 
        - Votes
      operationId: removeVote
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
        - in: path
          name: choiceId
          schema:
            type: number
            format: int64
          required: true
        - in: path
          name: userId
          schema: 
            type: number
            format: int64
          required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found


  /api/users/{userId}/comments:
    get:
      tags:
        - Comments
      operationId: getAllCommentsFromUser
      summary: Get all comments associated to a specific user
      parameters:
        - in: path
          name: userId
          schema:
            type: number
            format: int64
          required: true
      responses:
        '200':
          description: OK
        '404':
          description: Not Found

  /api/polls/{slug}/comments:
    get:
      tags:
        - Comments
      operationId: getAllCommentsFromPoll
      summary: Get all comments associated to a specific poll
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          

  /api/polls/{slug}/comments/{commentId}:
    get:
      tags:
        - Comments
      operationId: getCommentFromPoll
      summary: Get a specific comment associated to a scpecific poll
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
        - in: path
          name: commentId
          schema: 
            type: number
            format: int64
          required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
  
  /api/polls/{slug}/comments/{userId}:
    post:
      tags:
        - Comments
      operationId: createComment
      summary: Creation of a new comment by a specific user
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
        - in: path
          name: userId
          schema: 
            type: number
            format: int64
          required: true
        - in: query
          name: comment
          schema: 
            $ref: '#/components/schemas/Comment'
          required: true
      responses:
        '201':
          description: Created
        '404':
          description: Not Found


  /api/polls/{slug}/mealpreferences:
    get:
      tags:
        - MealPreferences
      operationId: getAllMealPreferencesFromPoll
      summary: Get all meal preferences associated to a specific poll
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
        '404':
          description: Not Found

  /api/polls/{slug}/mealpreference/{mealPreferenceId}:
    get:
      tags:
        - MealPreferences
      operationId: getMealPreferenceFromPoll
      summary: Get a specific meal preference from a specific poll
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
        - in: path
          name: mealPreferenceId
          schema:
            type: number
            format: int64
          required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found

  /api/polls/{slug}/mealpreference/{userId}:
    post:
      tags:
        - MealPreferences
      operationId: createMealPreference
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
        - in: path
          name: userId
          schema:
            type: number
            format: int64
          required: true
        - in: query
          name: mealPreference
          schema: 
            $ref: '#/components/schemas/MealPreference'
          required: true
      responses:
        '201':
          description: Created
        '404':
          description: Not Found


  /api/polls/{slug}/results:
    get:
      tags:
        - Export
      operationId: downloadResultsExcel
      summary: Exports in an excel file
      parameters:
        - in: path
          name: slug
          schema: 
            type: string
          required: true
      responses:
        '200':
          description: OK
        '404':
          description: Not Found




components:
  schemas:
    User:
      type: object
      properties:
        id: 
          type: number
          format: long
        username:
          type: string
        userChoices:
          type: array
          items:
            $ref: '#/components/schemas/Choice'
        userPolls:
          type: array
          items:
            $ref: '#/components/schemas/Poll'
        userMealPreferences:
          type: array
          items:
            $ref: '#/components/schemas/Choice'
    
    Choice:
      type: object
      properties:
        id:
          type: number
          format: long
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        users:
          $ref: '#/components/schemas/Users'
            
    Choices:
      type: array
      items: 
        $ref: '#/components/schemas/Choice'
        
    Comments:
      type: array
      items: 
        $ref: '#/components/schemas/Comment'
    
    MealPreferences:
      type: array
      items: 
        $ref: '#/components/schemas/MealPreference'
        
    Users:
      type: array
      items: 
        $ref: '#/components/schemas/User'
    
    Poll:
      type: object
      properties:
        id:
          type: number
          format: long
        title:
          type: string
        location:
          type: string 
        description:
          type: string
        has_meal:
          type: boolean
        slug:
          type: string
        slugAdmin:
          type: string
        tlkURL:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        pollChoices:
          $ref: '#/components/schemas/Choices'
        pollComments:
          $ref: '#/components/schemas/Comments'
        pollMealPreferences:
          $ref: '#/components/schemas/MealPreferences'
        padURL:  
          type: string


    Comment:
      type: object
      properties:
        id:
          type: number
          format: long
        content:
          type: string
        user:
          $ref: '#/components/schemas/User'


    MealPreference:
      type: object
      properties:
        id:
          type: number
          format: long
        content:
          type: string
        user:
          $ref: '#/components/schemas/User'
